#!/usr/bin/env node

'use strict';

// Imports
const _ = require('underscore');
const fs = require('fs');
const path = require('path');
const plist = require('plist');
const XML = require('xml2js');

// Setup
const parser = XML.Parser();
const source = process.argv[2];
const target = process.argv[3];

const parseIndex = function(indexFile) {
  return new Promise((resolve, reject) => {
    const settingsDir = path.dirname(indexFile);
    const parsed = {
      groups: [],
    };
    const data = fs.readFileSync(indexFile);

    parser.parseString(data, function(err, result) {
      if(err) {
        reject(err);
      } else {
        const indexData = result.plist.dict[0].array[1].dict;
        const groupPromises = [];

        indexData.forEach((group) => {
          let name = group.string[0];
          let uuid = group.string[1];
          let groupFile = path.join(settingsDir, getGroupFilename(settingsDir, uuid));

          groupPromises.push(parseGroup(groupFile).then((data) => {
            parsed.groups.push({
              uuid: uuid,
              name: name,
              data: data,
            });
          }));
        });

        Promise.all(groupPromises).then(() => {
          resolve(parsed);
        });
      }
    });
  });
};

const parseGroup = function(groupFile) {
  return new Promise((resolve, reject) => {
    const root = path.dirname(groupFile);
    const file = fs.readFileSync(groupFile);

    parser.parseString(file, function(err, result) {
      if(err) {
        reject(err);
      } else {
        resolve(result.plist.dict[0]);
      }
    });
  });
};

const getGroupFilename = function(groupPath, uuid) {
  const patternGroup = new RegExp('^group_' + uuid + '_.{10}\.xml$', 'i');
  const files = fs.readdirSync(groupPath);
  const groupFiles = files.filter((filename) => filename.match(patternGroup));

  return _.max(groupFiles, (file) => {
    return fs.statSync(path.join(groupPath, file)).mtime;
  })
}

parseIndex(source).then((parsed) => {
  // console.log(parsed);
  console.log(JSON.stringify(parsed.groups[0]));
})